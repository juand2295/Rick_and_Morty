{"ast":null,"code":"var _jsxFileName = \"/Users/valeperezvel/Desktop/rick_and_morty/src/components/favorites/Favorites.jsx\";\nimport { connect } from \"react-redux\";\nimport Card from \"../card/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Favorites(_ref) {\n  let {\n    myFavorites\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children:\n    // vamos a mapear por cada personaje una Card (lo que hacemos en vez de poner character como arg es destructuring)\n    myFavorites.map((element, index) => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        // Card esta esperando 7 props (asi que las tengo que poner)\n        id: element.id,\n        name: element.name,\n        status: element.status,\n        species: element.species,\n        gender: element.gender,\n        origin: element.origin.name,\n        image: element.image\n        // tambien hay que pasarle onClose, que esa no hace parte del objeto\n        ,\n        onClose: () => element.onClose(id)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 23\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 8\n  }, this);\n}\n_c = Favorites;\nconst mapStateToProps = state => {\n  return {\n    myFavorites: state.myFavorites\n  };\n};\nexport default connect(mapStateToProps, null)(Favorites);\nvar _c;\n$RefreshReg$(_c, \"Favorites\");","map":{"version":3,"names":["connect","Card","jsxDEV","_jsxDEV","Favorites","_ref","myFavorites","children","map","element","index","id","name","status","species","gender","origin","image","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","mapStateToProps","state","$RefreshReg$"],"sources":["/Users/valeperezvel/Desktop/rick_and_morty/src/components/favorites/Favorites.jsx"],"sourcesContent":["import { connect } from \"react-redux\";\nimport Card from \"../card/Card\";\n\nfunction Favorites ({myFavorites}) {\n    return (\n       <div>\n          {\n            // vamos a mapear por cada personaje una Card (lo que hacemos en vez de poner character como arg es destructuring)\n            myFavorites.map((element, index) => {\n               return <Card key={index}// Card esta esperando 7 props (asi que las tengo que poner)\n               id = {element.id}\n               name = {element.name}\n               status = {element.status}\n               species = {element.species}\n               gender = {element.gender}\n               origin = {element.origin.name}\n               image = {element.image}\n               // tambien hay que pasarle onClose, que esa no hace parte del objeto\n               onClose = {() => element.onClose(id)}\n               />\n            })\n         }\n       </div>\n    ); \n }\n\n const mapStateToProps = (state) => {\n    return {\n       myFavorites: state.myFavorites\n    }\n }\n\n export default connect(mapStateToProps, null)(Favorites)"],"mappings":";AAAA,SAASA,OAAO,QAAQ,aAAa;AACrC,OAAOC,IAAI,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,SAASA,CAAAC,IAAA,EAAiB;EAAA,IAAf;IAACC;EAAW,CAAC,GAAAD,IAAA;EAC7B,oBACGF,OAAA;IAAAI,QAAA;IAEK;IACAD,WAAW,CAACE,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;MACjC,oBAAOP,OAAA,CAACF,IAAI;QAAY;QACxBU,EAAE,EAAIF,OAAO,CAACE,EAAG;QACjBC,IAAI,EAAIH,OAAO,CAACG,IAAK;QACrBC,MAAM,EAAIJ,OAAO,CAACI,MAAO;QACzBC,OAAO,EAAIL,OAAO,CAACK,OAAQ;QAC3BC,MAAM,EAAIN,OAAO,CAACM,MAAO;QACzBC,MAAM,EAAIP,OAAO,CAACO,MAAM,CAACJ,IAAK;QAC9BK,KAAK,EAAIR,OAAO,CAACQ;QACjB;QAAA;QACAC,OAAO,EAAIA,CAAA,KAAMT,OAAO,CAACS,OAAO,CAACP,EAAE;MAAE,GATnBD,KAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUtB,CAAC;IACL,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEF,CAAC;AAEZ;AAACC,EAAA,GArBOnB,SAAS;AAuBjB,MAAMoB,eAAe,GAAIC,KAAK,IAAK;EAChC,OAAO;IACJnB,WAAW,EAAEmB,KAAK,CAACnB;EACtB,CAAC;AACJ,CAAC;AAED,eAAeN,OAAO,CAACwB,eAAe,EAAE,IAAI,CAAC,CAACpB,SAAS,CAAC;AAAA,IAAAmB,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}