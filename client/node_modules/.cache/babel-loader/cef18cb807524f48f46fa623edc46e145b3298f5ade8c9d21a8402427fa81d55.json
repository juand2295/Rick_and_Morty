{"ast":null,"code":"var _jsxFileName = \"/Users/valeperezvel/Desktop/rick_and_morty/src/components/cards/Cards.jsx\";\nimport Card from '../card/Card';\nimport styles from './Cards.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Cards(props) {\n  const {\n    characters\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.divCards,\n    children:\n    // vamos a mapear por cada personaje una Card (lo que hacemos en vez de poner character como arg es destructuring)\n    characters.map(_ref => {\n      let {\n        id,\n        name,\n        status,\n        species,\n        gender,\n        origin,\n        image\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(Card, {\n        // Card esta esperando 7 props (asi que las tengo que poner)\n        name: name,\n        status: status,\n        species: species,\n        gender: gender,\n        origin: origin.name,\n        image: image\n        // tambien hay que pasarle onClose, que esa no hace parte del objeto\n        ,\n        onClose: characters.onClose\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 23\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this);\n}\n_c = Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["Card","styles","jsxDEV","_jsxDEV","Cards","props","characters","className","divCards","children","map","_ref","id","name","status","species","gender","origin","image","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/valeperezvel/Desktop/rick_and_morty/src/components/cards/Cards.jsx"],"sourcesContent":["import Card from '../card/Card';\nimport styles from './Cards.module.css'\n\nexport default function Cards(props) {\n   const {characters} = props\n   \n   return (\n      <div className={styles.divCards}>\n         {\n            // vamos a mapear por cada personaje una Card (lo que hacemos en vez de poner character como arg es destructuring)\n            characters.map(({id, name, status, species, gender,origin, image}) => {\n               return <Card key={id}// Card esta esperando 7 props (asi que las tengo que poner)\n               name = {name}\n               status = {status}\n               species = {species}\n               gender = {gender}\n               origin = {origin.name}\n               image = {image}\n               // tambien hay que pasarle onClose, que esa no hace parte del objeto\n               onClose = {characters.onClose}\n               />\n            })\n         }\n      </div>\n   )\n}\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,cAAc;AAC/B,OAAOC,MAAM,MAAM,oBAAoB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,eAAe,SAASC,KAAKA,CAACC,KAAK,EAAE;EAClC,MAAM;IAACC;EAAU,CAAC,GAAGD,KAAK;EAE1B,oBACGF,OAAA;IAAKI,SAAS,EAAEN,MAAM,CAACO,QAAS;IAAAC,QAAA;IAE1B;IACAH,UAAU,CAACI,GAAG,CAACC,IAAA,IAAuD;MAAA,IAAtD;QAACC,EAAE;QAAEC,IAAI;QAAEC,MAAM;QAAEC,OAAO;QAAEC,MAAM;QAACC,MAAM;QAAEC;MAAK,CAAC,GAAAP,IAAA;MAC9D,oBAAOR,OAAA,CAACH,IAAI;QAAS;QACrBa,IAAI,EAAIA,IAAK;QACbC,MAAM,EAAIA,MAAO;QACjBC,OAAO,EAAIA,OAAQ;QACnBC,MAAM,EAAIA,MAAO;QACjBC,MAAM,EAAIA,MAAM,CAACJ,IAAK;QACtBK,KAAK,EAAIA;QACT;QAAA;QACAC,OAAO,EAAIb,UAAU,CAACa;MAAQ,GARZP,EAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASnB,CAAC;IACL,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAEZ;AAACC,EAAA,GAtBuBpB,KAAK;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}