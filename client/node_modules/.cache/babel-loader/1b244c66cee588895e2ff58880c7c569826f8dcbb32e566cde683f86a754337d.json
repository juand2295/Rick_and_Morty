{"ast":null,"code":"var _jsxFileName = \"/Users/valeperezvel/Desktop/rick_and_morty/src/components/favorites/Favorites.jsx\";\nimport { connect } from \"react-redux\";\nimport Card from \"../card/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Favorites(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children:\n    // vamos a mapear por cada personaje una Card (lo que hacemos en vez de poner character como arg es destructuring)\n    props.myFavorites.map(_ref => {\n      let {\n        id,\n        name,\n        status,\n        species,\n        gender,\n        origin,\n        image\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(Card, {\n        // Card esta esperando 7 props (asi que las tengo que poner)\n        id: id,\n        name: name,\n        status: status,\n        species: species,\n        gender: gender,\n        origin: origin.name,\n        image: image\n        // tambien hay que pasarle onClose, que esa no hace parte del objeto\n        ,\n        onClose: () => props.onClose(id)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 23\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 8\n  }, this);\n}\n_c = Favorites;\nconst mapStateToProps = state => {\n  return {\n    myFavorites: state.myFavorites\n  };\n};\nexport default connect(mapStateToProps, null)(Favorites);\nvar _c;\n$RefreshReg$(_c, \"Favorites\");","map":{"version":3,"names":["connect","Card","jsxDEV","_jsxDEV","Favorites","props","children","myFavorites","map","_ref","id","name","status","species","gender","origin","image","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","mapStateToProps","state","$RefreshReg$"],"sources":["/Users/valeperezvel/Desktop/rick_and_morty/src/components/favorites/Favorites.jsx"],"sourcesContent":["import { connect } from \"react-redux\";\nimport Card from \"../card/Card\";\n\nfunction Favorites (props) {\n    return (\n       <div>\n          {\n            // vamos a mapear por cada personaje una Card (lo que hacemos en vez de poner character como arg es destructuring)\n            props.myFavorites.map(({id, name, status, species, gender,origin, image}) => {\n               return <Card key={id}// Card esta esperando 7 props (asi que las tengo que poner)\n               id = {id}\n               name = {name}\n               status = {status}\n               species = {species}\n               gender = {gender}\n               origin = {origin.name}\n               image = {image}\n               // tambien hay que pasarle onClose, que esa no hace parte del objeto\n               onClose = {() => props.onClose(id)}\n               />\n            })\n         }\n       </div>\n    ); \n }\n\n const mapStateToProps = (state) => {\n    return {\n       myFavorites: state.myFavorites\n    }\n }\n\n export default connect(mapStateToProps, null)(Favorites)"],"mappings":";AAAA,SAASA,OAAO,QAAQ,aAAa;AACrC,OAAOC,IAAI,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,SAASA,CAAEC,KAAK,EAAE;EACvB,oBACGF,OAAA;IAAAG,QAAA;IAEK;IACAD,KAAK,CAACE,WAAW,CAACC,GAAG,CAACC,IAAA,IAAuD;MAAA,IAAtD;QAACC,EAAE;QAAEC,IAAI;QAAEC,MAAM;QAAEC,OAAO;QAAEC,MAAM;QAACC,MAAM;QAAEC;MAAK,CAAC,GAAAP,IAAA;MACrE,oBAAON,OAAA,CAACF,IAAI;QAAS;QACrBS,EAAE,EAAIA,EAAG;QACTC,IAAI,EAAIA,IAAK;QACbC,MAAM,EAAIA,MAAO;QACjBC,OAAO,EAAIA,OAAQ;QACnBC,MAAM,EAAIA,MAAO;QACjBC,MAAM,EAAIA,MAAM,CAACJ,IAAK;QACtBK,KAAK,EAAIA;QACT;QAAA;QACAC,OAAO,EAAIA,CAAA,KAAMZ,KAAK,CAACY,OAAO,CAACP,EAAE;MAAE,GATjBA,EAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUnB,CAAC;IACL,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEF,CAAC;AAEZ;AAACC,EAAA,GArBOlB,SAAS;AAuBjB,MAAMmB,eAAe,GAAIC,KAAK,IAAK;EAChC,OAAO;IACJjB,WAAW,EAAEiB,KAAK,CAACjB;EACtB,CAAC;AACJ,CAAC;AAED,eAAeP,OAAO,CAACuB,eAAe,EAAE,IAAI,CAAC,CAACnB,SAAS,CAAC;AAAA,IAAAkB,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}